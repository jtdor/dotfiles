alias cdtemp='cd "$(mktemp -d)"'
alias egrep='egrep --color=auto --exclude=tags --exclude-dir=.git'
alias fgrep='fgrep --color=auto --exclude=tags --exclude-dir=.git'
alias grep='grep --color=auto --exclude=tags --exclude-dir=.git'
alias rsyncgit='git ls-files --exclude-standard --ignored --other | rsync --cvs-exclude --exclude=.git --exclude-from=-'

# Convenience function to create a tags file for a C project, including
# selected system headers.
#
# The used command line options are compatible with Universal Ctags, but *not*
# with Exuberant Ctags.
#
# Usage: myctags [additional option(s)] [file(s)] [directory(s)]
myctags()
{
	declare -r DEV_LIBS=(libc6-dev)
	declare -r CTAGS_ARGS=(--append --kinds-C=+px --fields=+S --langmap=C:+.h --languages=C --recurse --sort=yes)

	dev_headers=()
	for dev_lib in "${DEV_LIBS[@]}"; do
		dev_lib_files=($(dpkg --listfiles "$dev_lib"))

		for dev_lib_file in "${dev_lib_files[@]}"; do
			[[ -f "$dev_lib_file" ]] && dev_headers+=("$dev_lib_file")
		done
	done

	ctags "${CTAGS_ARGS[@]}" "$@" "${dev_headers[@]}"
}

# Convenience function to create a tags file for a C++ project, including
# selected system headers.
#
# The used command line options are compatible with Universal Ctags, but *not*
# with Exuberant Ctags.
#
# Usage: myctags [additional option(s)] [file(s)] [directory(s)]
mycxxtags()
{
	declare -r CTAGS_ARGS=(--kinds-C++=+p --extras=+q --fields=+aiS --languages=C,C++ --recurse --sort=yes)

	declare -r stdlib_dir=$(ls -1 --directory /usr/include/c++/* | sort --unique --version-sort | tail --lines=1)

	myctags # Good idea to include this?
	ctags "${CTAGS_ARGS[@]}" --append --langmap=C++:+. --languages=C,C++ "$stdlib_dir"
	ctags "${CTAGS_ARGS[@]}" --append "$@"
}

# Convenience function to create a tags file for a Python 3 project, including
# selected system packages.
#
# The used command line options are compatible with Universal Ctags, but *not*
# with Exuberant Ctags.
#
# Usage: mypy3tags [additional option(s)] [file(s)] [directory(s)]
mypy3tags()
{
	declare -r CTAGS_ARGS=(--append --fields=+l --languages=python --kinds-python=-iv --recurse --sort=yes)

	typeset search_path=()
	for search_dir in $(python3 -c "import sys; print(' '.join(sys.path[1:]))"); do
		[[ -e "$search_dir" ]] && search_path+=("$search_dir")
	done

	ctags "${CTAGS_ARGS[@]}" "${search_path[@]}" "$@"
}

# Quickly remove a temporary directory created with the cdtemp alias.
#
# Usage: rmtemp
rmtemp()
{
	local answer tmpwd=${PWD}/
	if [[ "$tmpwd" != /tmp/tmp.* ]]; then
		printf "not in a '/tmp/tmp.*' path, not removing\n" >&2
		return
	fi
	tmpwd=${tmpwd%"${tmpwd#/tmp/tmp.*/}"}
	printf "remove '%s'? [yN]: " "$tmpwd"
	read -r answer
	if [[ "$answer" == "y" ]]; then
		rm -rf -- "$tmpwd"
	fi
}

# Create a new or attach to an existing tmux session in $PWD or the directory
# given as first argument.
#
# The session is named after the last path component of the above directory.
#
# Usage: tmux_here [dir]
tmux_here()
{
	if [[ $# -gt 1 ]]; then
		printf 'too many arguments\n' >&2
		return 2
	fi

	local here
	here=$(realpath -e -- "${1-$PWD}") || return
	tmux new-session -A -c "$here" -s "${here##*/}"
}
