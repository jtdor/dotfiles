# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Convenience function to create a tags file for a C project, including
# selected system headers.
#
# The used command line options are compatible with Universal Ctags, but *not*
# with Exuberant Ctags.
#
# Usage: myctags [additional option(s)] [file(s)] [directory(s)]
myctags()
{
	declare -r DEV_LIBS=(libc6-dev)
	declare -r CTAGS_ARGS="--C-kinds=+px --fields=+S --langmap=C:+.h --languages=C --recurse --sort=yes"

	dev_headers=()
	for dev_lib in "${DEV_LIBS[@]}"; do
		dev_lib_files=($(dpkg --listfiles "$dev_lib"))

		for dev_lib_file in "${dev_lib_files[@]}"; do
			[[ -f "$dev_lib_file" ]] && dev_headers+=("$dev_lib_file")
		done
	done

	ctags $CTAGS_ARGS "$@" "${dev_headers[@]}"
}

# Convenience function to create a tags file for a C++ project, including
# selected system headers.
#
# The used command line options are compatible with Universal Ctags, but *not*
# with Exuberant Ctags.
#
# Usage: myctags [additional option(s)] [file(s)] [directory(s)]
mycxxtags()
{
	declare -r CTAGS_ARGS="--C++-kinds=+p --extras=+q --fields=+aiS --languages=C,C++ --recurse --sort=yes"

	declare -r stdlib_dir=$(ls -1 --directory /usr/include/c++/* | sort --unique --version-sort | tail --lines=1)

	myctags # Good idea to include this?
	ctags $CTAGS_ARGS --append --langmap=C++:+. --languages=C,C++ "$stdlib_dir"
	ctags $CTAGS_ARGS --append "$@"
}

# Convenience function to create a tags file for a Python 3 project, including
# selected system packages.
#
# The used command line options are compatible with Universal Ctags, but *not*
# with Exuberant Ctags.
#
# Usage: mypy3tags [additional option(s)] [file(s)] [directory(s)]
mypy3tags()
{
	declare -r CTAGS_ARGS="--fields=+l --languages=python --python-kinds=-iv --recurse --sort=yes"

	typeset search_path=()
	for search_dir in $(python3 -c "import sys; print(' '.join(sys.path[1:]))"); do
		[[ -e "$search_dir" ]] && search_path+=( "$search_dir" )
	done

	ctags $CTAGS_ARGS "${search_path[@]}" "$@"
}

# Quickly remove a temporary directory created with the cdtemp alias.
#
# Usage: rmtemp
rmtemp()
{
	local tmpwd=${PWD}/
	if [[ "$tmpwd" != /tmp/tmp.* ]]; then
		printf "not in a '/tmp/tmp.*' path, not removing\n" >&2
		return
	fi
	while [[ ! "$tmpwd" =~ ^/tmp/tmp\.[[:alnum:]]+/$ ]]; do
		tmpwd=${tmpwd%/*/}/
	done
	printf "remove '%s'? [yN]: " "$tmpwd"
	read answer
	if [[ "$answer" == "y" ]]; then
		rm -rf -- "$tmpwd"
	fi
}
